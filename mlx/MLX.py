"""
MLX.py 

By Chad Timmins, 2015
chadtimmins@gmail.com 

Provides a set of functions specific to our senior design agricultural monitoring system 
"""

import math

class MLX():
	def __init__(self, settings):
		V_th = settings['V_th']
		Kt_1 = settings['Kt_1']
		Kt_2 = settings['Kt_2']
		
		fullRange = 65536
		halfRange = 32767

		if V_th < halfRange:
			self.V_th = V_th
		else:
			self.V_th = V_th - fullRange

		if Kt_1 < halfRange:
			self.Kt_1 = Kt_1 / 1024.0
		else:
			self.Kt_1 = (Kt_1 - fullRange) / 1024.0

		if Kt_2 < halfRange:
			self.Kt_2 = Kt_2 / 1048576.0
		else:
			self.Kt_2 = (Kt_2 - fullRange) / 1048576.0

		self.Ai_ij = [ 
		 0xD4, 0xD4, 0xD4, 0xD6, 0xD6, 0xD6, 0xD7, 0xDA, 0xDA, 0xDA, 0xDC, 0xDB, 0xDC, 0xDD, 0xDE, 0xDC,
		 0xDF, 0xDF, 0xE0, 0xDE, 0xE0, 0xE1, 0xE0, 0xDE, 0xE1, 0xE1, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE4, 
		 0xE7, 0xE6, 0xE6, 0xE7, 0xE9, 0xE8, 0xE9, 0xEA, 0xE9, 0xEB, 0xEA, 0xEB, 0xE9, 0xEB, 0xEC, 0xED, 
		 0xEB, 0xEC, 0xEC, 0xEF, 0xEC, 0xEE, 0xEE, 0xF0, 0xEC, 0xED, 0xEE, 0xEF, 0xEC, 0xEC, 0xEC, 0xEF]

		self.Bi_ij = [ 
		 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xC4, 0xC4, 0xC4, 0xC4, 0xCD, 0xC4, 0xCD, 0xCD, 0xCD, 0xCD, 
		 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xD5, 0xD5, 0xD5, 
		 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 0xDE, 
		 0xDE, 0xDE, 0xDE, 0xE6, 0xDE, 0xDE, 0xDE, 0xE6, 0xDE, 0xDE, 0xE6, 0xEF, 0xDE, 0xDE, 0xDE, 0xE6]

		self.delta_alpha = [
		 0x00, 0x29, 0x30, 0x1F, 0x26, 0x5D, 0x5D, 0x41, 0x41, 0x78, 0x7C, 0x67, 0x5D, 0x94, 0x9B, 0x83, 
		 0x6E, 0xAF, 0xAC, 0x97, 0x7C, 0xBA, 0xC1, 0xA8, 0x86, 0xC1, 0xCB, 0xAC, 0x86, 0xC4, 0xC4, 0xA8, 
		 0x82, 0xB9, 0xC7, 0xA5, 0x82, 0xB6, 0xBD, 0x9A, 0x7B, 0xAF, 0xB2, 0x93, 0x78, 0xA5, 0xAC, 0x89, 
		 0x6E, 0x93, 0x9E, 0x78, 0x60, 0x86, 0x86, 0x67, 0x48, 0x67, 0x6D, 0x4B, 0x29, 0x4F, 0x52, 0x25]

		self.Acp = 0xE6
		self.Bcp = 0xCD
		self.alphacp_l = 0x18
		self.alphacp_h = 0x09
		self.TGC = 0x00
		self.Bi_scale = 0x08
		self.alpha0_l = 0x39
		self.alpha0_h = 0x98
		self.alpha_scale = 0x29
		self.delta_alpha_scale = 0x22
		self.e_l = 0x00
		self.e_h = 0x80

		if self.Acp < 127:
			self.Acp = self.Acp
		else:
		 	self.Acp = self.Acp - 256

		if self.Bcp < 127:
		 	self.Bcp = self.Bcp
		else:
		 	self.Bcp = self.Bcp - 256

		for Ai_ij in self.Ai_ij:	
			if self.Ai_ij < 127:
			 	self.Ai_ij = Ai_ij
			else:
			 	self.Ai_ij = self.Ai_ij - 256
		
		for Bi_ij in self.Bi_ij:
			if self.Bi_ij < 127:
			 	self.Bi_ij = self.Bi_ij
			else:
			 	self.Bi_ij = self.Bi_ij - 256

		if self.TGC < 127:
		 	self.TGC = self.TGC
		else:
		 	self.TGC = self.TGC - 256


	def calculateAmbientTemp(self, PTAT):
		sqt = math.sqrt( (self.Kt_1 ** 2) - (4*self.Kt_2*(self.V_th - PTAT)) )
		T_ambient = ((-1)*self.Kt_1 + sqt) / (2*self.Kt_2)
		T_ambient = T_ambient + 25.0

		return T_ambient
